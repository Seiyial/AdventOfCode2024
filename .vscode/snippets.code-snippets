{
	// Place your AoC2024 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"gen bun": {
		"scope": "typescript",
		"prefix": "genbun",
		"body": [
			"import { argv } from 'bun'",
			"import { readFileSync } from 'fs'",
			"",
			"export const solve = (input: string) => {",
			"\t",
			"\t",
			"\t",
			"}",
			"",
			"const input = readFileSync(argv[2], 'utf-8')",
			"console.log('Solution:', solve(input))"
		]
	},
	"gen deno": {
		"scope": "typescript",
		"prefix": "genden",
		"body": [
			"import { readFileSync } from 'fs'",
			"",
			"export const solve = (input: string) => {",
			"\t",
			"\t",
			"\t",
			"}",
			"",
			"const input = readFileSync('input.txt', 'utf-8')",
			"console.log('Solution:', solve(input))"
		]
	},
	"gen rust": {
		"scope": "rust",
		"prefix": "genrust",
		"body": [
			"use std::io::Error;",
			"use aoc::solve_input_file;",
			"",
			"fn solve(input: String) -> Result<String, Error> {",
			"\t",
			"\tOk(\"\".to_string())",
			"\t",
			"}",
			"",
			"fn main() {",
			"\tsolve_input_file(solve)",
			"}"
		]
	}
}